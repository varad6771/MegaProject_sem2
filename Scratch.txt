# p1 = (int(left), int(top))
            # p2 = (int(right), int(bottom))
#roi = image_np[int(left):int(right), int(top):int(bottom)]






# if __name__ == '__main__':
#     write_settings('varad', 'vanjape', 'app1','app2','app3')
#     read_settings()
# example of how to access the data from file
# for settings_data_file in input_data['Settings']:
#     print('Name: ' + settings_data_file['name'])
#     print('Password: ' + settings_data_file['password'])
#     print('app1: ' + settings_data_file['app1'])
#     print('app2: ' + settings_data_file['app2'])
#     print('app3: ' + settings_data_file['app3'])
#     print('')



os.remove() removes a file.
os.rmdir() removes an empty directory.
shutil.rmtree() deletes a directory and all its contents.




-------------------------------------------------------------------------------------------------------------------------
OutputBox.insert(END, "Example text")







'''
	    #Text Box for username
        uname_sign=StringVar()
        e = Entry(sign,textvariable=uname_sign,width=15,bg="lightgreen").place(x=330,y=110)

        plabel =

        upass_sign=StringVar()
        e=Entry(sign,show="*",textvariable=upass_sign,width=15,bg="lightgreen").place(x=330,y=160)
        '''

    def login_func(self):
        # print("Clicked")
        input_uname = self.entry_username.get()
        input_pwd = self.entry_password.get()


        in_file = input_uname+".json"

        if cs.file_existence(in_file) == False:
            print("file does not exist so login fail")
            messagebox.showerror("Login Fail", "User does not Exist")
            input_uname = self.entry_username.delete(0, END)
            input_pwd  = self.entry_password.delete(0, END)
        else:
            input_data = cs.read_settings(in_file)
            for data_file in input_data['Settings']:

                red_pwd = data_file['password']
                red_unm = data_file['name']
                if cs.checkUnm(red_unm, input_uname) == True and cs.checkPwd(red_pwd, input_pwd) == True:
                    print("login success")
                    # TODO go to dashboard page and hide this one
                    print("on DashboardForm1")
                else:
                    messagebox.showerror("Login error", "Incorrect Credentials")
                    input_uname = self.entry_username.delete(0, END)
                    input_pwd  = self.entry_password.delete(0, END)

    
    def register_func(self):
        print("in register_func")
        uname_val = self.entry_username.get()
        pwd_val  = self.entry_password.get()
        in_file = uname_val+".json"

        ciphertext_input = cs.encrypt(pwd_val)

        if cs.file_existence(in_file) == False:
            print("file does not exist so write settings")
            if cs.checkEmpty(uname_val) == False and cs.checkEmpty(pwd_val) == False:
                created_settings_file = cs.write_settings(uname_val, ciphertext_input, "abc", "abc", "abc", "abc", "abc")
                print("register successful file created  "+created_settings_file)
                messagebox.showinfo("Register Succesful", "Please set app preferences in settings")
                uname_val = self.entry_username.delete(0, END)
                pwd_val  = self.entry_password.delete(0, END)
            else:
                messagebox.showerror("Empty Credentials","Credential cannot be empty!! Please fill all the fields")
        else:
            input_data = cs.read_settings(in_file)
            for settings_data_file in input_data['Settings']:
                if settings_data_file['name'] == uname_val:
                    print("data exist! you cannot re-register")
                    messagebox.showerror("Error","User Already Exists!! You cannot Re-Register")
                    break



root = Tk()
lf = LoginFrame(root)
root.mainloop()


# trial.py

import tkinter as tk                # python 3
from tkinter import font  as tkfont # python 3
#import Tkinter as tk     # python 2
#import tkFont as tkfont  # python 2

class SampleApp(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        self.title_font = tkfont.Font(family='Helvetica', size=18, weight="bold", slant="italic")

        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for F in (StartPage, PageOne, PageTwo):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame

            # put all of the pages in the same location;
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("StartPage")

    def show_frame(self, page_name):
        '''Show a frame for the given page name'''
        frame = self.frames[page_name]
        frame.tkraise()


class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="This is the start page", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)

        button1 = tk.Button(self, text="Go to Page One",
                            command=lambda: controller.show_frame("PageOne"))
        button2 = tk.Button(self, text="Go to Page Two",
                            command=lambda: controller.show_frame("PageTwo"))
        button1.pack()
        button2.pack()


class PageOne(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="This is page 1", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Go to the start page",
                           command=lambda: controller.show_frame("StartPage"))
        button.pack()


class PageTwo(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="This is page 2", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Go to the start page",
                           command=lambda: controller.show_frame("StartPage"))
        button.pack()


if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()




// dynamic hand gesture recognition github
https://www.codeingschool.com/2019/01/real-time-hand-gesture-recognition-using-python.html
https://github.com/subhamroy021/Hand-Gestures
https://www.geeksforgeeks.org/project-idea-dynamic-hand-gesture-recognition-using-neural-network/
https://github.com/mahaveerverma/hand-gesture-recognition-opencv
https://github.com/sabs231/hand-gesture-recon
https://abhishek4273.com/2014/07/20/motion-tracking-using-opencv/
http://answers.opencv.org/question/175258/dynamic-gesture-recognition/
https://abhishek4273.com/2014/07/20/motion-tracking-using-opencv/
https://gogul09.github.io/software/hand-gesture-recognition-p1
https://docs.opencv.org/3.0-beta/modules/optflow/doc/motion_templates.html

// crop image to roi
http://answers.opencv.org/question/29260/how-to-save-a-rectangular-roi/
https://www.codementor.io/innat_2k14/extract-a-particular-object-from-images-using-opencv-in-python-jfogyig5u
https://stackoverflow.com/questions/39493195/cropping-an-image-with-respect-to-co-ordinates-selected
http://answers.opencv.org/question/11405/crop-image-using-four-points/
https://www.learnopencv.com/how-to-select-a-bounding-box-roi-in-opencv-cpp-python/
http://answers.opencv.org/question/87261/extract-parts-from-image/

// others
https://code.i-harness.com/en/q/7324c2
https://stackoverflow.com/questions/7546050/switch-between-two-frames-in-tkinter
http://effbot.org/tkinterbook/text.htm#patterns

// switching between windows
https://developer.gnome.org/gtk3/stable/GtkWindow.html
https://developer.gnome.org/gtk3/stable/GtkApplication.html#gtk-application-get-window-by-id
https://www.bachsau.com/2015/07/13/how-to-use-gtk-3-in-python-to-manage-your-whole-application/
https://python-gtk-3-tutorial.readthedocs.io/en/latest/application.html#example
